{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport fetch from 'node-fetch';\nimport { setContext } from 'apollo-link-context';\nvar httpLink = createHttpLink({\n  uri: 'http://localhost:4000/',\n  fetch: fetch\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  // Leer el storage almacenado\n  var token = localStorage.getItem('token');\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  };\n});\nvar client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n});\nexport default client;","map":{"version":3,"sources":["C:/RepositoriosDesarrollo/e-Ludumv4/WAI-Eludum/config/apollo.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","fetch","setContext","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","cache","link","concat"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,IAAMC,QAAQ,GAAGJ,cAAc,CAAC;AAC/BK,EAAAA,GAAG,EAAE,wBAD0B;AAE/BH,EAAAA,KAAK,EAALA;AAF+B,CAAD,CAA/B;AAKA,IAAMI,QAAQ,GAAGH,UAAU,CAAC,UAACI,CAAD,QAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAE/C;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEA,SAAO;AACNH,IAAAA,OAAO,kCACHA,OADG;AAENI,MAAAA,aAAa,EAAEH,KAAK,oBAAaA,KAAb,IAAuB;AAFrC;AADD,GAAP;AAMA,CAX0B,CAA3B;AAaA,IAAMI,MAAM,GAAG,IAAId,YAAJ,CAAiB;AAC/Be,EAAAA,KAAK,EAAE,IAAIb,aAAJ,EADwB;AAE/Bc,EAAAA,IAAI,EAAET,QAAQ,CAACU,MAAT,CAAiBZ,QAAjB;AAFyB,CAAjB,CAAf;AAKA,eAAeS,MAAf","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport fetch from 'node-fetch';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\nconst httpLink = createHttpLink({\r\n\turi: 'http://localhost:4000/',\r\n\tfetch\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n\r\n\t// Leer el storage almacenado\r\n\tconst token = localStorage.getItem('token');\r\n\r\n\treturn {\r\n\t\theaders: {\r\n\t\t\t...headers,\r\n\t\t\tauthorization: token ? `Bearer ${token}` : ''\r\n\t\t}\r\n\t}\r\n});\r\n\r\nconst client = new ApolloClient({\r\n\tcache: new InMemoryCache(),\r\n\tlink: authLink.concat( httpLink )\r\n});\r\n\r\nexport default client;"]},"metadata":{},"sourceType":"module"}